#! /usr/bin/env bqn

runtime ← •Import "_extern/bqn/rt.bqn"     # Runtime: primitives available to VM
gl      ← •Import "_extern/bqn/src/glyphs.bqn"

compile  ← gl •Import "src/compiler.bqn"  # Compiler: source → object code
#compile0  ← gl •Import "_extern/bqn/src/c.bqn"     # 
compile0 ← gl •Import "src/c.bqn"  # Compiler: source → object code
#vm      ←    •Import "_extern/bqn/vm.bqn"     # VM: interprets object code
vm      ←    •Import "src/vm.bqn"     # VM: interprets object code

# TODO map •FFI to  bqns FFI

bkp←"foo.bqn:2"

# Define system values later, to include BQN
BQN ← ⟨runtime, {System 𝕩}⟩ ⊸ (Compile)
BQN0 ← {
  dir 𝕊 src:
    out←⟨𝕨, runtime, { System 𝕩 }⟩ Compile0 src
    # TODO preparse
    dir‿src‿⟨"foo.bqn:2"⟩ VM out
}

#⌜
# System values
IsPrim ← ∊⟜runtime⌾<
Glyph ← runtime⊸⊐⌾<⊑(∾gl)˙
Decompose ← IsPrim◶⟨•Decompose,0⊸≍⟩

# Formatter
tn ← "*"⊸(∾∾⊣)¨"array"‿"function"‿"1-modifier"‿"2-modifier"‿"namespace"
Fmt‿Repr ← (•Import "_extern/bqn/src/f.bqn"){𝔽} ⟨
  •Type
  Decompose
  IsPrim◶⟨tn⊑˜•Type-2˙, Glyph⟩ # Format operation/namespace
  •Repr                        # Format number
⟩
Show ← •Out∘Fmt⊸⊢⊢

#⌜
# Evaluate
Eval←{
  0 < ≠𝕩 ?
    t ← ⊑ "-e"‿"-p" ⊐ ⊏𝕩
    f←0⊑𝕩
    dir←f/˜¬+`'/'=f
    dir BQN0 •file.Chars 0⊑𝕩
}

# TODO defer import
Import ← {
  # TODO add args
  Eval ⟨𝕨.dir∾'/'∾𝕩⟩
}

# Lookup table
systable←⟨
  "bqn"‿"type"‿"glyph"‿"decompose"‿"repr"‿"fmt"‿"out"‿"show"‿"import"
   BQN ‿•Type ‿ Glyph ‿ Decompose ‿ Repr ‿ Fmt ‿•Out ‿ Show ‿ Import
⟩

  # Lookup table
FindSys ← {
  i ← 𝕨⊐𝕩
  { ! ∾⟨"Unknown system value",(1≠≠𝕩)/"s",":"⟩∾" •"⊸∾¨𝕩 }∘/⟜𝕩⍟(∨´) i=≠𝕨
  i
}
system ← {𝕨⊸FindSys⊏𝕩˙}´systable

Eval •args

BQN  # Return the evaluator so it can be •Include d from BQN
